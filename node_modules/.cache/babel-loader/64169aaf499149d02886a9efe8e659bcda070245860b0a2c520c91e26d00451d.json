{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport todo from \"../../data/todo.json\";\nconst state = {\n  todo: todo.data\n};\nconst mutations = {\n  taskcomplete: (state, payload) => {\n    state.todo.find(function (list) {\n      if (list.id === payload) {\n        return list.status = list.status === 'complete' ? 'incomplete' : 'complete';\n      }\n    });\n  },\n  alltaskcomplete: (state, payload) => {\n    state.todo.filter(function (list) {\n      return list.status = payload === true ? 'complete' : 'incomplete';\n    });\n  },\n  tododelete: (state, payload) => {\n    state.todo = state.todo.filter(list => list.id !== payload);\n  },\n  addtodo: (state, payload) => {\n    let todoID = [];\n    state.todo.forEach(element => {\n      todoID.push(element.id);\n    });\n    let id = Math.max(...todoID) + 1;\n    state.todo.unshift({\n      'id': id,\n      'title': payload,\n      'priority': \"Pending\",\n      'date': \"16 Jan\",\n      'badgeClass': \"badge-light-danger\",\n      'delete': false,\n      'status': 'incomplete'\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations\n};","map":{"version":3,"names":["todo","state","data","mutations","taskcomplete","payload","find","list","id","status","alltaskcomplete","filter","tododelete","addtodo","todoID","forEach","element","push","Math","max","unshift","namespaced"],"sources":["D:/Wrenix/Spring-Sfa/Cuba/template/template/src/store/modules/todo.js"],"sourcesContent":["import todo from \"../../data/todo.json\"\n\nconst state = {\n    todo : todo.data\n};\n\nconst mutations = {\n    taskcomplete:(state,payload)=>{\n        state.todo.find(function (list) {\n            if (list.id === payload) {\n                return list.status = list.status === 'complete' ? 'incomplete' : 'complete';\n            }\n        });\n    },\n    alltaskcomplete:(state,payload)=>{\n       state.todo.filter(function (list) {\n               return list.status = payload === true ? 'complete':'incomplete';\n        });\n    },\n    tododelete:(state,payload)=>{\n        state.todo = state.todo.filter(list => list.id !== payload);\n    },\n    addtodo:(state,payload)=>{\n        let todoID= []\n        state.todo.forEach(element => {\n            todoID.push(element.id)\n        });\n\n        let id = Math.max(...todoID)+1;\n         state.todo.unshift(\n            {\n                'id': id,\n                'title': payload,\n                'priority':\"Pending\",\n                'date':\"16 Jan\",\n                'badgeClass':\"badge-light-danger\",\n                'delete': false,\n                'status': 'incomplete'\n            }\n        );\n\n    }\n};\nexport default {\n\tnamespaced: true,\n\tstate,\n\tmutations\n};"],"mappings":";;;;;AAAA,OAAOA,IAAI,MAAM,sBAAsB;AAEvC,MAAMC,KAAK,GAAG;EACVD,IAAI,EAAGA,IAAI,CAACE;AAChB,CAAC;AAED,MAAMC,SAAS,GAAG;EACdC,YAAY,EAACA,CAACH,KAAK,EAACI,OAAO,KAAG;IAC1BJ,KAAK,CAACD,IAAI,CAACM,IAAI,CAAC,UAAUC,IAAI,EAAE;MAC5B,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO,EAAE;QACrB,OAAOE,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACE,MAAM,KAAK,UAAU,GAAG,YAAY,GAAG,UAAU;MAC/E;IACJ,CAAC,CAAC;EACN,CAAC;EACDC,eAAe,EAACA,CAACT,KAAK,EAACI,OAAO,KAAG;IAC9BJ,KAAK,CAACD,IAAI,CAACW,MAAM,CAAC,UAAUJ,IAAI,EAAE;MAC1B,OAAOA,IAAI,CAACE,MAAM,GAAGJ,OAAO,KAAK,IAAI,GAAG,UAAU,GAAC,YAAY;IACtE,CAAC,CAAC;EACN,CAAC;EACDO,UAAU,EAACA,CAACX,KAAK,EAACI,OAAO,KAAG;IACxBJ,KAAK,CAACD,IAAI,GAAGC,KAAK,CAACD,IAAI,CAACW,MAAM,CAACJ,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO,CAAC;EAC/D,CAAC;EACDQ,OAAO,EAACA,CAACZ,KAAK,EAACI,OAAO,KAAG;IACrB,IAAIS,MAAM,GAAE,EAAE;IACdb,KAAK,CAACD,IAAI,CAACe,OAAO,CAACC,OAAO,IAAI;MAC1BF,MAAM,CAACG,IAAI,CAACD,OAAO,CAACR,EAAE,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAIA,EAAE,GAAGU,IAAI,CAACC,GAAG,CAAC,GAAGL,MAAM,CAAC,GAAC,CAAC;IAC7Bb,KAAK,CAACD,IAAI,CAACoB,OAAO,CACf;MACI,IAAI,EAAEZ,EAAE;MACR,OAAO,EAAEH,OAAO;MAChB,UAAU,EAAC,SAAS;MACpB,MAAM,EAAC,QAAQ;MACf,YAAY,EAAC,oBAAoB;MACjC,QAAQ,EAAE,KAAK;MACf,QAAQ,EAAE;IACd,CACJ,CAAC;EAEL;AACJ,CAAC;AACD,eAAe;EACdgB,UAAU,EAAE,IAAI;EAChBpB,KAAK;EACLE;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}