{"ast":null,"code":"// src/services/apiService.js\nimport axios from 'axios';\nimport apiConfig from './api/config';\nimport { setupInterceptors } from './api/interceptors';\n\n// Create axios instance with config\nconst apiClient = setupInterceptors(axios.create(apiConfig));\n\n// Error handler helper\nconst handleApiError = error => {\n  console.error('API Error:', error);\n  let errorMessage = 'An error occurred. Please try again.';\n  if (error.response) {\n    // Server responded with error\n    const {\n      status,\n      data\n    } = error.response;\n    if (status === 400 && data.message) {\n      errorMessage = data.message;\n    } else if (status === 401) {\n      errorMessage = 'Authentication failed. Please login again.';\n    } else if (status === 403) {\n      errorMessage = 'You do not have permission to access this resource.';\n    } else if (status === 404) {\n      errorMessage = 'Resource not found.';\n    } else if (status === 500) {\n      errorMessage = 'Server error. Please try again later.';\n    }\n  } else if (error.request) {\n    // Request made but no response received\n    errorMessage = 'No response from server. Please check your connection.';\n  }\n  return Promise.reject({\n    error,\n    message: errorMessage\n  });\n};\n\n// Auth services\nconst authService = {\n  login(email, password) {\n    return apiClient.post('/api/auth/login', {\n      email,\n      password\n    }).catch(handleApiError);\n  },\n  logout() {\n    return apiClient.post('/api/auth/logout').catch(handleApiError);\n  },\n  register(userData) {\n    return apiClient.post('/api/auth/register', userData).catch(handleApiError);\n  },\n  refreshToken() {\n    return apiClient.post('/api/auth/refresh').catch(handleApiError);\n  }\n};\n\n// Employee services\nconst employeeService = {\n  getEmployees(page = 0, size = 20) {\n    return apiClient.get(`/employees`, {\n      params: {\n        page,\n        size\n      }\n    }).catch(handleApiError);\n  },\n  getEmployeeById(id) {\n    return apiClient.get(`/api/employees/${id}`).catch(handleApiError);\n  },\n  createEmployee(employeeData) {\n    return apiClient.post('/api/employees', employeeData).catch(handleApiError);\n  },\n  updateEmployee(id, employeeData) {\n    return apiClient.put(`/api/employees/${id}`, employeeData).catch(handleApiError);\n  },\n  deleteEmployee(id) {\n    return apiClient.delete(`/api/employees/${id}`).catch(handleApiError);\n  }\n};\n\n// Export all services\nexport default {\n  ...authService,\n  ...employeeService\n};","map":{"version":3,"names":["axios","apiConfig","setupInterceptors","apiClient","create","handleApiError","error","console","errorMessage","response","status","data","message","request","Promise","reject","authService","login","email","password","post","catch","logout","register","userData","refreshToken","employeeService","getEmployees","page","size","get","params","getEmployeeById","id","createEmployee","employeeData","updateEmployee","put","deleteEmployee","delete"],"sources":["D:/Wrenix/Spring-Sfa/Cuba/template/template/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\r\nimport axios from 'axios';\r\nimport apiConfig from './api/config';\r\nimport { setupInterceptors } from './api/interceptors';\r\n\r\n// Create axios instance with config\r\nconst apiClient = setupInterceptors(axios.create(apiConfig));\r\n\r\n// Error handler helper\r\nconst handleApiError = (error) => {\r\n  console.error('API Error:', error);\r\n  let errorMessage = 'An error occurred. Please try again.';\r\n\r\n  if (error.response) {\r\n    // Server responded with error\r\n    const { status, data } = error.response;\r\n\r\n    if (status === 400 && data.message) {\r\n      errorMessage = data.message;\r\n    } else if (status === 401) {\r\n      errorMessage = 'Authentication failed. Please login again.';\r\n    } else if (status === 403) {\r\n      errorMessage = 'You do not have permission to access this resource.';\r\n    } else if (status === 404) {\r\n      errorMessage = 'Resource not found.';\r\n    } else if (status === 500) {\r\n      errorMessage = 'Server error. Please try again later.';\r\n    }\r\n  } else if (error.request) {\r\n    // Request made but no response received\r\n    errorMessage = 'No response from server. Please check your connection.';\r\n  }\r\n\r\n  return Promise.reject({ error, message: errorMessage });\r\n};\r\n\r\n// Auth services\r\nconst authService = {\r\n  login(email, password) {\r\n    return apiClient.post('/api/auth/login', { email, password })\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  logout() {\r\n    return apiClient.post('/api/auth/logout')\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  register(userData) {\r\n    return apiClient.post('/api/auth/register', userData)\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  refreshToken() {\r\n    return apiClient.post('/api/auth/refresh')\r\n      .catch(handleApiError);\r\n  }\r\n};\r\n\r\n// Employee services\r\nconst employeeService = {\r\n  getEmployees(page = 0, size = 20) {\r\n    return apiClient.get(`/employees`, { params: { page, size } })\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  getEmployeeById(id) {\r\n    return apiClient.get(`/api/employees/${id}`)\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  createEmployee(employeeData) {\r\n    return apiClient.post('/api/employees', employeeData)\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  updateEmployee(id, employeeData) {\r\n    return apiClient.put(`/api/employees/${id}`, employeeData)\r\n      .catch(handleApiError);\r\n  },\r\n\r\n  deleteEmployee(id) {\r\n    return apiClient.delete(`/api/employees/${id}`)\r\n      .catch(handleApiError);\r\n  }\r\n};\r\n\r\n// Export all services\r\nexport default {\r\n  ...authService,\r\n  ...employeeService\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}