{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8088',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Track authentication state\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Make sure this format matches what works in Postman\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Request with token:', config.url, config.headers.Authorization);\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for handling 403 errors\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response?.status === 403 && !originalRequest._retry) {\n    console.log('Received 403, attempting to handle...');\n\n    // If using refresh token flow\n    if (localStorage.getItem('refreshToken') && !isRefreshing) {\n      originalRequest._retry = true;\n      isRefreshing = true;\n      try {\n        // Implement your refresh token logic here\n        const refreshToken = localStorage.getItem('refreshToken');\n        const response = await apiClient.post('/api/auth/refresh', {\n          refreshToken\n        });\n        const {\n          token\n        } = response.data;\n        localStorage.setItem('token', token);\n        apiClient.defaults.headers.common.Authorization = `Bearer ${token}`;\n        processQueue(null, token);\n        return apiClient(originalRequest);\n      } catch (err) {\n        processQueue(err, null);\n        // Redirect to login on refresh failure\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        window.location = '/login';\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    } else {\n      // If no refresh token or already refreshing\n      console.warn('Authentication failed - redirecting to login');\n      localStorage.removeItem('token');\n      window.location = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default {\n  login(email, password) {\n    return apiClient.post('/api/auth/login', {\n      email,\n      password\n    }).then(response => {\n      console.log('Login response:', response.data);\n      // Make sure you store the token exactly as returned from API\n      localStorage.setItem('token', response.data.token);\n      if (response.data.refreshToken) {\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n      }\n      return response;\n    });\n  },\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    return Promise.resolve();\n  },\n  getEmployees(page = 0, size = 20) {\n    return apiClient.get(`/api/employees?page=${page}&size=${size}`);\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","interceptors","request","use","config","localStorage","getItem","Authorization","console","log","url","Promise","response","originalRequest","status","_retry","refreshToken","post","data","setItem","defaults","common","err","removeItem","window","location","warn","login","email","password","then","logout","getEmployees","page","size","get"],"sources":["D:/Wrenix/Spring-Sfa/Cuba/template/template/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:8088',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Track authentication state\r\nlet isRefreshing = false;\r\nlet failedQueue = [];\r\n\r\nconst processQueue = (error, token = null) => {\r\n  failedQueue.forEach(prom => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token);\r\n    }\r\n  });\r\n  failedQueue = [];\r\n};\r\n\r\n// Request interceptor\r\napiClient.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Make sure this format matches what works in Postman\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n    console.log('Request with token:', config.url, config.headers.Authorization);\r\n  }\r\n  return config;\r\n}, (error) => Promise.reject(error));\r\n\r\n// Response interceptor for handling 403 errors\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (error.response?.status === 403 && !originalRequest._retry) {\r\n      console.log('Received 403, attempting to handle...');\r\n\r\n      // If using refresh token flow\r\n      if (localStorage.getItem('refreshToken') && !isRefreshing) {\r\n        originalRequest._retry = true;\r\n        isRefreshing = true;\r\n\r\n        try {\r\n          // Implement your refresh token logic here\r\n          const refreshToken = localStorage.getItem('refreshToken');\r\n          const response = await apiClient.post('/api/auth/refresh', { refreshToken });\r\n          const { token } = response.data;\r\n\r\n          localStorage.setItem('token', token);\r\n          apiClient.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n\r\n          processQueue(null, token);\r\n          return apiClient(originalRequest);\r\n        } catch (err) {\r\n          processQueue(err, null);\r\n          // Redirect to login on refresh failure\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('refreshToken');\r\n          window.location = '/login';\r\n          return Promise.reject(err);\r\n        } finally {\r\n          isRefreshing = false;\r\n        }\r\n      } else {\r\n        // If no refresh token or already refreshing\r\n        console.warn('Authentication failed - redirecting to login');\r\n        localStorage.removeItem('token');\r\n        window.location = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default {\r\n  login(email, password) {\r\n    return apiClient.post('/api/auth/login', { email, password })\r\n      .then(response => {\r\n        console.log('Login response:', response.data);\r\n        // Make sure you store the token exactly as returned from API\r\n        localStorage.setItem('token', response.data.token);\r\n        if (response.data.refreshToken) {\r\n          localStorage.setItem('refreshToken', response.data.refreshToken);\r\n        }\r\n        return response;\r\n      });\r\n  },\r\n\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    return Promise.resolve();\r\n  },\r\n\r\n  getEmployees(page = 0, size = 20) {\r\n    return apiClient.get(`/api/employees?page=${page}&size=${size}`);\r\n  },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}