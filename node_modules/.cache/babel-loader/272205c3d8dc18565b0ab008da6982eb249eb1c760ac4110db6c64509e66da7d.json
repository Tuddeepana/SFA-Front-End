{"ast":null,"code":"import apiService from \"@/services/apiService\";\nexport default {\n  data() {\n    return {\n      employees: [],\n      currentPage: 0,\n      pageSize: 20,\n      loading: false,\n      authError: false\n    };\n  },\n  mounted() {\n    this.checkAuthAndFetchData();\n  },\n  methods: {\n    checkAuthAndFetchData() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        this.$toast.error(\"Please login to view employee data\");\n        this.authError = true;\n        // Uncomment to redirect to login\n        // this.$router.push('/login');\n        return;\n      }\n      this.fetchEmployees();\n    },\n    async fetchEmployees(page = 0) {\n      try {\n        this.loading = true;\n        this.currentPage = page;\n        console.log(`Fetching employees for page ${page}`);\n        const response = await apiService.getEmployees(page, this.pageSize);\n        if (response.data && response.data.content) {\n          this.employees = response.data.content;\n          console.log(`Loaded ${this.employees.length} employees`);\n        } else {\n          console.warn('Unexpected response format:', response.data);\n          this.employees = [];\n        }\n      } catch (error) {\n        console.error('Error fetching employees:', error);\n        if (error.response && error.response.status === 403) {\n          this.$toast.error(\"You don't have permission to view employees\");\n          this.authError = true;\n        } else {\n          this.$toast.error(\"Failed to load employees\");\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    getStatusClass(status) {\n      switch (status) {\n        case 'ACTIVE':\n          return 'badge badge-success';\n        case 'INACTIVE':\n          return 'badge badge-danger';\n        default:\n          return 'badge badge-secondary';\n      }\n    }\n  }\n};","map":{"version":3,"names":["apiService","data","employees","currentPage","pageSize","loading","authError","mounted","checkAuthAndFetchData","methods","token","localStorage","getItem","$toast","error","fetchEmployees","page","console","log","response","getEmployees","content","length","warn","status","getStatusClass"],"sources":["D:\\Wrenix\\Spring-Sfa\\Cuba\\template\\template\\src\\pages\\widgets\\employee\\employeeTable.vue"],"sourcesContent":["<template>\n  <div class=\"col-sm-12\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h5>Employee List</h5>\n      </div>\n\n      <div v-if=\"loading\" class=\"text-center p-5\">\n        <div class=\"spinner-border\" role=\"status\">\n          <span class=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n\n      <div v-else class=\"table-responsive\">\n        <table class=\"table table-hover\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Id</th>\n              <th scope=\"col\">First Name</th>\n              <th scope=\"col\">Last Name</th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Date Of Birth</th>\n              <th scope=\"col\">Status</th>\n              <th scope=\"col\">Gender</th>\n              <th>scope=\"col\">Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"employee in employees\" :key=\"employee.id\">\n              <th scope=\"row\">{{ employee.id }}</th>\n              <td>{{ employee.firstName }}</td>\n              <td>{{ employee.lastName }}</td>\n              <td>{{ employee.email }}</td>\n              <td>{{ employee.dob }}</td>\n              <td>\n                <span :class=\"getStatusClass(employee.status)\">{{ employee.status }}</span>\n              </td>\n              <td>{{ employee.gender }}</td>\n            </tr>\n            <tr v-if=\"employees.length === 0\">\n              <td colspan=\"7\" class=\"text-center\">No employees found</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Pagination -->\n      <div class=\"card-footer d-flex justify-content-between align-items-center\">\n        <div>\n          Showing page {{ currentPage + 1 }}\n        </div>\n        <div>\n          <button\n            class=\"btn btn-primary btn-sm me-2\"\n            :disabled=\"currentPage === 0\"\n            @click=\"fetchEmployees(currentPage - 1)\">\n            Previous\n          </button>\n          <button\n            class=\"btn btn-primary btn-sm\"\n            :disabled=\"employees.length < pageSize\"\n            @click=\"fetchEmployees(currentPage + 1)\">\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport apiService from \"@/services/apiService\";\n\nexport default {\n  data() {\n    return {\n      employees: [],\n      currentPage: 0,\n      pageSize: 20,\n      loading: false,\n      authError: false\n    };\n  },\n\n  mounted() {\n    this.checkAuthAndFetchData();\n  },\n\n  methods: {\n    checkAuthAndFetchData() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        this.$toast.error(\"Please login to view employee data\");\n        this.authError = true;\n        // Uncomment to redirect to login\n        // this.$router.push('/login');\n        return;\n      }\n\n      this.fetchEmployees();\n    },\n\n    async fetchEmployees(page = 0) {\n      try {\n        this.loading = true;\n        this.currentPage = page;\n\n        console.log(`Fetching employees for page ${page}`);\n        const response = await apiService.getEmployees(page, this.pageSize);\n\n        if (response.data && response.data.content) {\n          this.employees = response.data.content;\n          console.log(`Loaded ${this.employees.length} employees`);\n        } else {\n          console.warn('Unexpected response format:', response.data);\n          this.employees = [];\n        }\n      } catch (error) {\n        console.error('Error fetching employees:', error);\n\n        if (error.response && error.response.status === 403) {\n          this.$toast.error(\"You don't have permission to view employees\");\n          this.authError = true;\n        } else {\n          this.$toast.error(\"Failed to load employees\");\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    getStatusClass(status) {\n      switch (status) {\n        case 'ACTIVE':\n          return 'badge badge-success';\n        case 'INACTIVE':\n          return 'badge badge-danger';\n        default:\n          return 'badge badge-secondary';\n      }\n    }\n  }\n}\n</script>"],"mappings":"AAuEA,OAAOA,UAAS,MAAO,uBAAuB;AAE9C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,KAAK;MACdC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC9B,CAAC;EAEDC,OAAO,EAAE;IACPD,qBAAqBA,CAAA,EAAG;MACtB,MAAME,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACV,IAAI,CAACG,MAAM,CAACC,KAAK,CAAC,oCAAoC,CAAC;QACvD,IAAI,CAACR,SAAQ,GAAI,IAAI;QACrB;QACA;QACA;MACF;MAEA,IAAI,CAACS,cAAc,CAAC,CAAC;IACvB,CAAC;IAED,MAAMA,cAAcA,CAACC,IAAG,GAAI,CAAC,EAAE;MAC7B,IAAI;QACF,IAAI,CAACX,OAAM,GAAI,IAAI;QACnB,IAAI,CAACF,WAAU,GAAIa,IAAI;QAEvBC,OAAO,CAACC,GAAG,CAAC,+BAA+BF,IAAI,EAAE,CAAC;QAClD,MAAMG,QAAO,GAAI,MAAMnB,UAAU,CAACoB,YAAY,CAACJ,IAAI,EAAE,IAAI,CAACZ,QAAQ,CAAC;QAEnE,IAAIe,QAAQ,CAAClB,IAAG,IAAKkB,QAAQ,CAAClB,IAAI,CAACoB,OAAO,EAAE;UAC1C,IAAI,CAACnB,SAAQ,GAAIiB,QAAQ,CAAClB,IAAI,CAACoB,OAAO;UACtCJ,OAAO,CAACC,GAAG,CAAC,UAAU,IAAI,CAAChB,SAAS,CAACoB,MAAM,YAAY,CAAC;QAC1D,OAAO;UACLL,OAAO,CAACM,IAAI,CAAC,6BAA6B,EAAEJ,QAAQ,CAAClB,IAAI,CAAC;UAC1D,IAAI,CAACC,SAAQ,GAAI,EAAE;QACrB;MACF,EAAE,OAAOY,KAAK,EAAE;QACdG,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QAEjD,IAAIA,KAAK,CAACK,QAAO,IAAKL,KAAK,CAACK,QAAQ,CAACK,MAAK,KAAM,GAAG,EAAE;UACnD,IAAI,CAACX,MAAM,CAACC,KAAK,CAAC,6CAA6C,CAAC;UAChE,IAAI,CAACR,SAAQ,GAAI,IAAI;QACvB,OAAO;UACL,IAAI,CAACO,MAAM,CAACC,KAAK,CAAC,0BAA0B,CAAC;QAC/C;MACF,UAAU;QACR,IAAI,CAACT,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAEDoB,cAAcA,CAACD,MAAM,EAAE;MACrB,QAAQA,MAAM;QACZ,KAAK,QAAQ;UACX,OAAO,qBAAqB;QAC9B,KAAK,UAAU;UACb,OAAO,oBAAoB;QAC7B;UACE,OAAO,uBAAuB;MAClC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}